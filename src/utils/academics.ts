/**
 * Academic utilities for calculating absence limits and other academic-related functions
 */

import { AcademicLoadItem } from "@/types";

/**
 * Function 1: calculateAbsenceLimits
 * Input: An academic_load array (from our JSON)
 * Logic: Loops through the academic_load array. For each subject, calculates the absence limit using Math.floor(total_hours * 0.25)
 * Output: Returns an object (a map) where keys are subject names and values are their calculated limits
 */
export function calculateAbsenceLimits(
  academicLoad: AcademicLoadItem[]
): Record<string, number> {
  if (!Array.isArray(academicLoad)) {
    return {};
  }

  const limitsObject: Record<string, number> = {};

  for (const item of academicLoad) {
    if (item.subject && typeof item.total_hours === "number") {
      limitsObject[item.subject] = Math.floor(item.total_hours * 0.25);
    }
  }

  return limitsObject;
}

/**
 * Function 2: getAbsenceLimitForSubject
 * Input: A specific subjectNameFromSchedule (e.g., "Fəlsəfə (məş.)") and the limitsObject generated by the function above
 * Logic: Intelligently finds the correct base subject in the limitsObject. For example, "Fəlsəfə (məş.)" should match "Fəlsəfə"
 * Output: The corresponding limit number (e.g., 7)
 */
export function getAbsenceLimitForSubject(
  subjectNameFromSchedule: string,
  limitsObject: Record<string, number>
): number {
  if (!subjectNameFromSchedule || !limitsObject) {
    return 0;
  }

  // First, try exact match
  if (limitsObject[subjectNameFromSchedule] !== undefined) {
    return limitsObject[subjectNameFromSchedule];
  }

  // Extract the main subject name by removing parenthetical content
  // e.g., "Fəlsəfə (məş.)" -> "Fəlsəfə"
  const mainSubjectName = subjectNameFromSchedule
    .replace(/\s*\([^)]*\)\s*/g, "")
    .trim();

  // Try to find exact match with the cleaned name
  if (limitsObject[mainSubjectName] !== undefined) {
    return limitsObject[mainSubjectName];
  }

  // Try fuzzy matching - look for subjects that contain the main subject name or vice versa
  const normalizedMainSubject = normalizeSubjectName(mainSubjectName);

  for (const [subject, limit] of Object.entries(limitsObject)) {
    const normalizedSubject = normalizeSubjectName(subject);

    // Check if either subject contains the other (for partial matches)
    if (
      normalizedSubject.includes(normalizedMainSubject) ||
      normalizedMainSubject.includes(normalizedSubject)
    ) {
      return limit;
    }
  }

  // If no match found, return 0
  return 0;
}

/**
 * Helper function to normalize subject names for comparison
 * Removes extra whitespace, converts to lowercase, and handles common abbreviations
 */
export function normalizeSubjectName(subjectName: string): string {
  return (
    subjectName
      .trim()
      .toLowerCase()
      // Handle common abbreviations and variations
      .replace(/\s+/g, " ")
      .replace(/\./g, "")
      .replace(/məş/g, "məşğələ")
      .replace(/müh/g, "mühazirə")
      .replace(/lab/g, "laboratoriya")
  );
}

/**
 * Gets all subjects from academic load with their calculated absence limits
 * This is a helper function for displaying all subjects and their limits
 */
export function getAllSubjectsWithLimits(
  academicLoad: AcademicLoadItem[]
): Array<{
  subject: string;
  totalHours: number;
  absenceLimit: number;
}> {
  if (!Array.isArray(academicLoad)) {
    return [];
  }

  return academicLoad.map((item) => ({
    subject: item.subject,
    totalHours: item.total_hours,
    absenceLimit: Math.floor(item.total_hours * 0.25),
  }));
}

/**
 * Legacy function for backward compatibility
 * @deprecated Use getAbsenceLimitForSubject with calculateAbsenceLimits instead
 */
export function calculateAbsenceLimit(
  subjectName: string,
  academicLoad: AcademicLoadItem[]
): number {
  const limits = calculateAbsenceLimits(academicLoad);
  return getAbsenceLimitForSubject(subjectName, limits);
}

/**
 * Check if we're in the middle of the semester (after week 6)
 * This is used to determine if we should ask about previous absences
 */
export function isMidSemester(): boolean {
  const now = new Date();
  const currentWeek = getCurrentWeekNumber(now);

  // Consider mid-semester if we're past week 6
  return currentWeek > 6;
}

/**
 * Get current week number of the year
 */
function getCurrentWeekNumber(date: Date): number {
  const d = new Date(
    Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())
  );
  const dayNum = d.getUTCDay() || 7;
  if (dayNum !== 1) d.setUTCDate(d.getUTCDate() + (1 - dayNum));
  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  const weekNo = Math.ceil(
    ((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7
  );
  return weekNo;
}
